/*
Elabore uma fun√ß√£o que receba um array de n√∫meros e retorne um array que tenha todos os
n√∫meros que s√£o pares e que tamb√©m tenham √≠ndices pares.
üí°
Lembre-se que um n√∫mero √© par porque √© divis√≠vel por 2, ou seja, o resto da divis√£o dele
por 2 √© zero.

Exemplos:
receberSomenteOsParesDeIndicesPares([1, 2, 3, 4]) // retornar√° []
receberSomenteOsParesDeIndicesPares([10, 70, 22, 43]) // retornar√° [10, 22]
*/

console.log('Resolu√ß√£o 1:');

function receberSomenteOsParesDeIndicesPares(array) {
  const newArray = [];
  for (let i = 0; i < array.length; i++) {
    if (i % 2 === 0 && array[i] % 2 === 0) {
      newArray.push(array[i]);
    }
  }
  return newArray;
}

console.log(receberSomenteOsParesDeIndicesPares([1, 2, 3, 4]));
console.log(receberSomenteOsParesDeIndicesPares([10, 70, 22, 43]));

console.log('================================');

console.log('Resolu√ß√£o 2:');

const SomenteOsParesDeIndicesPares = (el, i) => el % 2 === 0 && i % 2 === 0;

function receberSomenteOsParesDeIndicesPares2(array) {
  return array.filter(SomenteOsParesDeIndicesPares);
}

console.log(receberSomenteOsParesDeIndicesPares2([1, 2, 3, 4]));
console.log(receberSomenteOsParesDeIndicesPares2([10, 70, 22, 43]));

console.log('================================');

console.log('Resolu√ß√£o 3:');

function receberSomenteOsParesDeIndicesPares3(numeros) {
  return numeros.filter((numero, indice) => {
    const numeroPar = numero % 2 === 0;
    const indicePar = indice % 2 === 0;

    return numeroPar && indicePar;
  });
}

console.log(receberSomenteOsParesDeIndicesPares3([1, 2, 3, 4]));
console.log(receberSomenteOsParesDeIndicesPares3([10, 70, 22, 43]));
